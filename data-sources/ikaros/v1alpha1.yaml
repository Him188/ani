openapi: 3.0.1
info:
  title: Ikaros Open API Documentation
  description: Documentation for Ikaros Open API
  license:
    name: AGPL-3.0 license
    url: https://github.com/ikaros-dev/ikaros/blob/master/LICENSE
  version: 1.0.0
externalDocs:
  description: Ikaros Official Site
  url: https://ikaros.run
paths:
  /actuator/loggers/{name}:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'loggers-name'
      operationId: loggers-name
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
    post:
      tags:
        - Actuator
      summary: Actuator web endpoint 'loggers-name'
      operationId: loggers-name_2
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              enum:
                - TRACE
                - DEBUG
                - INFO
                - WARN
                - ERROR
                - FATAL
                - 'OFF'
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /actuator/integrationgraph:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'integrationgraph'
      operationId: integrationgraph
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
    post:
      tags:
        - Actuator
      summary: Actuator web endpoint 'integrationgraph'
      operationId: integrationgraph_2
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /actuator/threaddump:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'threaddump'
      operationId: threaddump
      responses:
        '200':
          description: OK
          content:
            text/plain;charset=UTF-8:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/scheduledtasks:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'scheduledtasks'
      operationId: scheduledtasks
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/metrics/{requiredMetricName}:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'metrics-requiredMetricName'
      operationId: metrics-requiredMetricName
      parameters:
        - name: requiredMetricName
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/metrics:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'metrics'
      operationId: metrics
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/mappings:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'mappings'
      operationId: mappings
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/loggers:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'loggers'
      operationId: loggers
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/info:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'info'
      operationId: info
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/heapdump:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'heapdump'
      operationId: heapdump
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: object
  /actuator/health/{*path}:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'health-path'
      operationId: health-path
      parameters:
        - name: '*path'
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/health:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'health'
      operationId: health
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/env/{toMatch}:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'env-toMatch'
      operationId: env-toMatch
      parameters:
        - name: toMatch
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/env:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'env'
      operationId: env
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/configprops/{prefix}:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'configprops-prefix'
      operationId: configprops-prefix
      parameters:
        - name: prefix
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/configprops:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'configprops'
      operationId: configprops
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/conditions:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'conditions'
      operationId: conditions
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/caches/{cache}:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'caches-cache'
      operationId: caches-cache
      parameters:
        - name: cache
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
    delete:
      tags:
        - Actuator
      summary: Actuator web endpoint 'caches-cache'
      operationId: caches-cache_2
      parameters:
        - name: cache
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator/caches:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'caches'
      operationId: caches
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
    delete:
      tags:
        - Actuator
      summary: Actuator web endpoint 'caches'
      operationId: caches_2
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /actuator/beans:
    get:
      tags:
        - Actuator
      summary: Actuator web endpoint 'beans'
      operationId: beans
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /actuator:
    get:
      tags:
        - Actuator
      summary: Actuator root web endpoint
      operationId: links
      responses:
        '200':
          description: OK
          content:
            application/vnd.spring-boot.actuator.v3+json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/Link'
            application/vnd.spring-boot.actuator.v2+json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/Link'
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    $ref: '#/components/schemas/Link'
  /apis/plugin.ikaros.run/v1alpha1/plugin:
    put:
      tags:
        - plugin.ikaros.run/v1alpha1/plugin
      description: Update plugin
      operationId: UpdatePlugin
      parameters:
        - name: name
          in: path
          description: Name of plugin
          required: true
          schema:
            type: string
      requestBody:
        description: Updated Plugin
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Plugin'
      responses:
        '200':
          description: Response Plugin updated just now
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Plugin'
    post:
      tags:
        - plugin.ikaros.run/v1alpha1/plugin
      description: Create plugin
      operationId: CreatePlugin
      requestBody:
        description: Fresh Plugin
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Plugin'
      responses:
        '200':
          description: Response Plugin created just now
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Plugin'
  /apis/plugin.ikaros.run/v1alpha1/plugin/{name}:
    get:
      tags:
        - plugin.ikaros.run/v1alpha1/plugin
      description: Get plugin By Name.
      operationId: GetPlugin
      parameters:
        - name: name
          in: path
          description: Name of Plugin
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response single Plugin
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Plugin'
    delete:
      tags:
        - plugin.ikaros.run/v1alpha1/plugin
      description: Delete plugin
      operationId: DeletePlugin
      parameters:
        - name: name
          in: path
          description: Name of Plugin
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response Plugin deleted just now
  /apis/plugin.ikaros.run/v1alpha1/plugin/{name}/{metaName}:
    get:
      tags:
        - plugin.ikaros.run/v1alpha1/plugin
      description: Get plugin meta value by name and metaName.
      operationId: GetPluginMeta
      parameters:
        - name: name
          in: path
          description: Name of Plugin
          required: true
          schema:
            type: string
        - name: metaName
          in: path
          description: MetaName of Plugin
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response single Plugin metadata value.
    put:
      tags:
        - plugin.ikaros.run/v1alpha1/plugin
      description: 'Update plugin metadata value. '
      operationId: UpdatePluginMeta
      parameters:
        - name: name
          in: path
          description: Name of plugin
          required: true
          schema:
            type: string
        - name: metaName
          in: path
          description: MetaName of plugin
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          Updated Plugin Metadata value. current request body receive data type
          is byte[].class, If you specific data type is a String.class, must to
          add English double quotation marks.  correct is: "new value". 
          incorrect is: new value.
        content:
          '*/*':
            schema:
              type: string
        required: true
      responses:
        '200':
          description: Response Plugin metadata value  updated just now
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Plugin'
  /apis/plugin.ikaros.run/v1alpha1/plugins:
    get:
      tags:
        - plugin.ikaros.run/v1alpha1/plugin
      description: List plugins
      operationId: ListPlugins
      responses:
        '200':
          description: Response Plugin
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Plugin'
  /apis/plugin.ikaros.run/v1alpha1/plugins/{page}/{size}:
    get:
      tags:
        - plugin.ikaros.run/v1alpha1/plugin
      description: Get plugins by paging.
      operationId: GetPluginsByPaging.
      parameters:
        - name: page
          in: path
          description: Page of Plugin
          required: true
          schema:
            type: string
        - name: size
          in: path
          description: Size ofPlugin
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ResponsePlugin
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagingWrap'
  /apis/setting.ikaros.run/v1alpha1/configmap:
    put:
      tags:
        - setting.ikaros.run/v1alpha1/configmap
      description: Update configmap
      operationId: UpdateConfigmap
      parameters:
        - name: name
          in: path
          description: Name of configmap
          required: true
          schema:
            type: string
      requestBody:
        description: Updated ConfigMap
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ConfigMap'
      responses:
        '200':
          description: Response ConfigMap updated just now
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConfigMap'
    post:
      tags:
        - setting.ikaros.run/v1alpha1/configmap
      description: Create configmap
      operationId: CreateConfigmap
      requestBody:
        description: Fresh ConfigMap
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ConfigMap'
      responses:
        '200':
          description: Response ConfigMap created just now
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConfigMap'
  /apis/setting.ikaros.run/v1alpha1/configmap/{name}:
    get:
      tags:
        - setting.ikaros.run/v1alpha1/configmap
      description: Get configmap By Name.
      operationId: GetConfigmap
      parameters:
        - name: name
          in: path
          description: Name of ConfigMap
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response single ConfigMap
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConfigMap'
    delete:
      tags:
        - setting.ikaros.run/v1alpha1/configmap
      description: Delete configmap
      operationId: DeleteConfigmap
      parameters:
        - name: name
          in: path
          description: Name of ConfigMap
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response ConfigMap deleted just now
  /apis/setting.ikaros.run/v1alpha1/configmap/{name}/{metaName}:
    get:
      tags:
        - setting.ikaros.run/v1alpha1/configmap
      description: Get configmap meta value by name and metaName.
      operationId: GetConfigmapMeta
      parameters:
        - name: name
          in: path
          description: Name of ConfigMap
          required: true
          schema:
            type: string
        - name: metaName
          in: path
          description: MetaName of ConfigMap
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response single ConfigMap metadata value.
    put:
      tags:
        - setting.ikaros.run/v1alpha1/configmap
      description: 'Update configmap metadata value. '
      operationId: UpdateConfigmapMeta
      parameters:
        - name: name
          in: path
          description: Name of configmap
          required: true
          schema:
            type: string
        - name: metaName
          in: path
          description: MetaName of configmap
          required: true
          schema:
            type: string
      requestBody:
        description: >-
          Updated Configmap Metadata value. current request body receive data
          type is byte[].class, If you specific data type is a String.class,
          must to add English double quotation marks.  correct is: "new value". 
          incorrect is: new value.
        content:
          '*/*':
            schema:
              type: string
        required: true
      responses:
        '200':
          description: Response ConfigMap metadata value  updated just now
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConfigMap'
  /apis/setting.ikaros.run/v1alpha1/configmaps:
    get:
      tags:
        - setting.ikaros.run/v1alpha1/configmap
      description: List configmaps
      operationId: ListConfigmaps
      responses:
        '200':
          description: Response ConfigMap
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ConfigMap'
  /apis/setting.ikaros.run/v1alpha1/configmaps/{page}/{size}:
    get:
      tags:
        - setting.ikaros.run/v1alpha1/configmap
      description: Get configmaps by paging.
      operationId: GetConfigmapsByPaging.
      parameters:
        - name: page
          in: path
          description: Page of ConfigMap
          required: true
          schema:
            type: string
        - name: size
          in: path
          description: Size ofConfigMap
          required: true
          schema:
            type: string
      responses:
        '200':
          description: ResponseConfigMap
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagingWrap'
  /api/v1alpha1/attachment/directory:
    post:
      tags:
        - v1alpha1/attachment
      description: Create directory
      operationId: CreateDirectory
      parameters:
        - name: name
          in: query
          description: 经过Basic64编码的附件名称，附件名称字段模糊查询。
          required: true
          schema:
            type: string
        - name: parentId
          in: query
          description: 附件的父附件ID，父附件一般时目录类型。
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attachment'
  /api/v1alpha1/attachment/fragment/patch/{unique}:
    patch:
      tags:
        - v1alpha1/attachment
      description: Receive fragment upload chunk attachment.
      operationId: ReceiveFragmentUploadChunkAttachment
      parameters:
        - name: unique
          in: path
          description: Chunk attachment unique id.
          required: true
          schema:
            type: string
        - name: PARENT-ID
          in: header
          description: 附件的父附件ID，父附件一般时目录类型。
          schema:
            type: string
        - name: Upload-Length
          in: header
          description: Upload chunk attachment length.
          required: true
          schema:
            type: string
        - name: Upload-Offset
          in: header
          description: Upload chunk attachment offset.
          required: true
          schema:
            type: string
        - name: Upload-Name
          in: header
          description: Upload chunk attachment file name.
          required: true
          schema:
            type: string
      responses: { }
  /api/v1alpha1/attachment/fragment/revert:
    delete:
      tags:
        - v1alpha1/attachment
      description: Revert fragment upload attachment by unique id.
      operationId: RevertFragmentUploadAttachmentByUnique
      requestBody:
        description: Unique id.
        content:
          '*/*':
            schema:
              type: string
      responses: { }
  /api/v1alpha1/attachment/fragment/unique:
    post:
      tags:
        - v1alpha1/attachment
      description: Generate fragment upload attachment unique id.
      operationId: GenerateFragmentUploadAttachmentUniqueId
      responses:
        default:
          description: Random uuid.
          content:
            '*/*':
              schema:
                type: string
  /api/v1alpha1/attachment/paths/{id}:
    get:
      tags:
        - v1alpha1/attachment
      description: Get attachment path dirs by id.
      operationId: GetAttachmentPathDirsById
      parameters:
        - name: id
          in: path
          description: Attachment id.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attachment'
  /api/v1alpha1/attachment/reference:
    put:
      tags:
        - v1alpha1/attachment/reference
      description: Save attachment reference.
      operationId: SaveAttachmentReference
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AttachmentReference'
      responses: { }
  /api/v1alpha1/attachment/reference/id:
    delete:
      tags:
        - v1alpha1/attachment/reference
      operationId: DeleteAttachmentReference
      parameters:
        - name: id
          in: query
          description: AttachmentReference ID
          required: true
          schema:
            type: integer
            format: int64
      responses: { }
  /api/v1alpha1/attachment/reference/uk:
    delete:
      tags:
        - v1alpha1/attachment/reference
      description: Remove by type and attachmentId and referenceId
      operationId: RemoveByTypeAndAttachmentIdAndReferenceId
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AttachmentReference'
      responses: { }
  /api/v1alpha1/attachment/references:
    get:
      tags:
        - v1alpha1/attachment/reference
      operationId: FindAllByTypeAndAttachmentId
      parameters:
        - name: type
          in: query
          description: AttachmentReference type
          required: true
          schema:
            type: string
            enum:
              - SUBJECT
              - EPISODE
              - USER_AVATAR
        - name: attachmentId
          in: query
          description: Attachment id
          required: true
          schema:
            type: integer
            format: int64
      responses: { }
  /api/v1alpha1/attachment/references/episode:
    post:
      tags:
        - v1alpha1/attachment/reference
      description: >-
        Matching attachments for single episode, one episode has many attachment
        refs.
      operationId: MatchingAttachmentsForEpisode
      requestBody:
        description: batch matching episodes and attachments request value object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/BatchMatchingEpisodeAttachment'
        required: true
      responses: { }
  /api/v1alpha1/attachment/references/subject/episodes:
    post:
      tags:
        - v1alpha1/attachment/reference
      description: >-
        Matching attachments to episodes for single subject, one episode has one
        attachment ref.
      operationId: MatchingAttachmentsAndSubjectEpisodes
      requestBody:
        description: batch matching episodes and attachments request value object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/BatchMatchingSubjectEpisodesAttachment'
        required: true
      responses: { }
  /api/v1alpha1/attachment/relation/videoSubtitle/subtitles/{attachmentId}:
    get:
      tags:
        - v1alpha1/attachment/relation
      operationId: FindAttachmentVideoSubtitles
      parameters:
        - name: attachmentId
          in: path
          description: Attachment ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VideoSubtitle'
  /api/v1alpha1/attachment/relation/{masterAttachmentId}:
    put:
      tags:
        - v1alpha1/attachment/relation
      operationId: PutAttachmentRelation
      parameters:
        - name: masterAttachmentId
          in: path
          description: Master attachment id
          required: true
          schema:
            type: integer
            format: int64
        - name: relAttachmentId
          in: query
          description: Related attachment id
          required: true
          schema:
            type: integer
            format: int64
        - name: type
          in: query
          description: Type of attachment
          required: true
          schema:
            type: string
            enum:
              - VIDEO_SUBTITLE
      responses:
        default:
          description: Attachment Relation.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AttachmentRelation'
    delete:
      tags:
        - v1alpha1/attachment/relation
      operationId: DeleteAttachmentRelation
      parameters:
        - name: masterAttachmentId
          in: path
          description: Master attachment id
          required: true
          schema:
            type: integer
            format: int64
        - name: relAttachmentId
          in: query
          description: Related attachment id
          required: true
          schema:
            type: integer
            format: int64
        - name: type
          in: query
          description: Type of attachment
          required: true
          schema:
            type: string
            enum:
              - VIDEO_SUBTITLE
      responses:
        default:
          description: Attachment Relation.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AttachmentRelation'
  /api/v1alpha1/attachment/relations:
    get:
      tags:
        - v1alpha1/attachment/relation
      operationId: FindAttachmentRelations
      parameters:
        - name: attachmentId
          in: query
          description: Attachment ID
          required: true
          schema:
            type: integer
            format: int64
        - name: relationType
          in: query
          description: Relation type
          required: true
          schema:
            type: string
            enum:
              - VIDEO_SUBTITLE
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttachmentRelation'
    post:
      tags:
        - v1alpha1/attachment/relation
      operationId: PostAttachmentRelations
      requestBody:
        description: Post attachment relations request body.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PostAttachmentRelationsParam'
        required: true
      responses:
        default:
          description: Attachment Relation List.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AttachmentRelation'
  /api/v1alpha1/attachment/update:
    put:
      tags:
        - v1alpha1/attachment
      description: Update attachment.
      operationId: UpdateAttachment
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Attachment'
      responses: { }
  /api/v1alpha1/attachment/upload:
    post:
      tags:
        - v1alpha1/attachment
      operationId: UploadAttachment
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DefaultUploadRequest'
        required: true
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Attachment'
  /api/v1alpha1/attachment/{id}:
    get:
      tags:
        - v1alpha1/attachment
      operationId: GetAttachmentById
      parameters:
        - name: id
          in: path
          description: Attachment ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Attachment'
    delete:
      tags:
        - v1alpha1/attachment
      operationId: DeleteAttachment
      parameters:
        - name: id
          in: path
          description: Attachment ID
          required: true
          schema:
            type: integer
            format: int64
      responses: { }
  /api/v1alpha1/attachments/condition:
    get:
      tags:
        - v1alpha1/attachment
      description: List attachments by condition.
      operationId: ListAttachmentsByCondition
      parameters:
        - name: page
          in: query
          description: 第几页，从1开始, 默认为1.
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          description: 每页条数，默认为10.
          schema:
            type: integer
            format: int32
        - name: type
          in: query
          description: 附件类型。
          schema:
            type: string
            enum:
              - File
              - Directory
        - name: name
          in: query
          description: 经过Basic64编码的附件名称，附件名称字段模糊查询。
          schema:
            type: string
        - name: parentId
          in: query
          description: 附件的父附件ID，父附件一般时目录类型。
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagingWrap'
  /api/v1alpha1/episode/attachment/refs/{id}:
    get:
      tags:
        - v1alpha1/episode
      description: Find episode all attachment refs by episode id.
      operationId: FindEpisodeAttachmentRefsById
      parameters:
        - name: id
          in: path
          description: Episode id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: Episode resource list.
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EpisodeResource'
  /api/v1alpha1/episode/collection/finish/{userId}/{episodeId}/{finish}:
    put:
      tags:
        - v1alpha1/episode/collection
      operationId: UpdateEpisodeCollectionFinish
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
        - name: episodeId
          in: path
          description: Episode id
          required: true
          schema:
            type: integer
            format: int64
        - name: finish
          in: path
          description: Episode collection finish.
          required: true
          schema:
            type: boolean
      responses: { }
  /api/v1alpha1/episode/collection/{userId}/{episodeId}:
    get:
      tags:
        - v1alpha1/episode/collection
      operationId: FindEpisodeCollection
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
        - name: episodeId
          in: path
          description: Episode id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EpisodeCollection'
    put:
      tags:
        - v1alpha1/episode/collection
      operationId: UpdateEpisodeCollection
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
        - name: episodeId
          in: path
          description: Episode id
          required: true
          schema:
            type: integer
            format: int64
        - name: progress
          in: query
          description: Episode collection progress, unit is milliseconds.
          required: true
          schema:
            type: integer
            format: int64
        - name: duration
          in: query
          description: Episode collection duration, unit is milliseconds.
          schema:
            type: integer
            format: int64
      responses: { }
    post:
      tags:
        - v1alpha1/episode/collection
      operationId: SaveEpisodeCollection
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
        - name: episodeId
          in: path
          description: Episode id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EpisodeCollection'
    delete:
      tags:
        - v1alpha1/episode/collection
      operationId: DeleteEpisodeCollection
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
        - name: episodeId
          in: path
          description: Episode id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EpisodeCollection'
  /api/v1alpha1/episode/collections/subjectId/{userId}/{subjectId}:
    get:
      tags:
        - v1alpha1/episode/collection
      operationId: FindEpisodeCollectionsByUserIdAndSubjectId
      parameters:
        - name: userId
          in: path
          description: User id
          required: true
          schema:
            type: integer
            format: int64
        - name: subjectId
          in: path
          description: Subject id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EpisodeCollection'
  /api/v1alpha1/episode/meta/{id}:
    get:
      tags:
        - v1alpha1/episode
      description: Find episode meta by episode id.
      operationId: FindEpisodeMetaById
      parameters:
        - name: id
          in: path
          description: Episode id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EpisodeMeta'
  /api/v1alpha1/episode/{id}:
    get:
      tags:
        - v1alpha1/episode
      description: Find episode by episode id.
      operationId: FindEpisodeById
      parameters:
        - name: id
          in: path
          description: Episode id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Episode'
  /api/v1alpha1/indices/subject:
    get:
      tags:
        - v1alpha1/indices
      description: Search subjects with fuzzy query
      operationId: SearchSubject
      parameters:
        - name: limit
          in: query
          style: form
          schema:
            type: integer
            format: int32
            default: 100
        - name: highlightPostTag
          in: query
          style: form
          schema:
            type: string
            default: </B>
        - name: keyword
          in: query
          required: true
          style: form
          schema:
            type: string
        - name: highlightPreTag
          in: query
          style: form
          schema:
            type: string
            default: <B>
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SubjectHints'
    post:
      tags:
        - v1alpha1/indices
      description: Build or rebuild subject indices for full text search
      operationId: BuildSubjectIndices
      responses: { }
  /api/v1alpha1/plugin/install/file:
    post:
      tags:
        - v1alpha1/plugin
      description: Install plugin by upload jar file.
      operationId: InstallPluginByFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadRequest'
        required: true
      responses:
        '200':
          description: Install plugin by jar file success.
  /api/v1alpha1/plugin/upgrade/file/{pluginId}:
    post:
      tags:
        - v1alpha1/plugin
      description: Upgrade plugin by upload jar file.
      operationId: UpgradePluginByFile
      parameters:
        - name: pluginId
          in: path
          description: Plugin id(name).
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadRequest'
        required: true
      responses:
        '200':
          description: Upgrade plugin by jar file success.
  /api/v1alpha1/plugin/{name}/state:
    put:
      tags:
        - v1alpha1/plugin
      description: Operate plugin state by id(name).
      operationId: OperatePluginStateById
      parameters:
        - name: name
          in: path
          description: >-
            Name of plugin, this is id also. if operate all plugins, please set
            value is [ALL]. 
          required: true
          schema:
            type: string
        - name: operate
          in: query
          description: Operate of plugin state.
          required: true
          schema:
            type: string
            enum:
              - START
              - STOP
              - ENABLE
              - DISABLE
              - LOAD
              - LOAD_ALL
              - RELOAD
              - RELOAD_ALL
              - RELOAD_ALL_STARTED
              - DELETE
              - UNLOAD
      responses:
        '200':
          description: Plugin state after operated.
          content:
            '*/*':
              schema:
                type: string
                enum:
                  - CREATED
                  - DISABLED
                  - RESOLVED
                  - STARTED
                  - STOPPED
                  - FAILED
  /api/v1alpha1/plugin/{name}/state/reload:
    put:
      tags:
        - v1alpha1/plugin
      description: Reload plugin by id(name).
      operationId: ReloadPluginById
      parameters:
        - name: name
          in: path
          description: Name of plugin, this is id also.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response true is reload success, false is request or reload fail.
          content:
            '*/*':
              schema:
                type: boolean
  /api/v1alpha1/plugin/{name}/state/start:
    put:
      tags:
        - v1alpha1/plugin
      description: Start plugin by id(name).
      operationId: StartPluginById
      parameters:
        - name: name
          in: path
          description: Name of plugin, this is id also.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response true is start success, false is request or start fail.
          content:
            '*/*':
              schema:
                type: boolean
  /api/v1alpha1/plugin/{name}/state/stop:
    put:
      tags:
        - v1alpha1/plugin
      description: Stop plugin by id(name).
      operationId: StopPluginById
      parameters:
        - name: name
          in: path
          description: Name of plugin, this is id also.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Response true is stop success, false is request or stop fail.
          content:
            '*/*':
              schema:
                type: boolean
  /api/v1alpha1/static/fonts:
    get:
      tags:
        - v1alpha1/static
      description: List font dir all fonts in work statics dir.
      operationId: ListStaticsFonts
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
  /api/v1alpha1/subject:
    put:
      tags:
        - v1alpha1/subject
      description: Update single subject.
      operationId: UpdateSubject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
        required: true
      responses: { }
    post:
      tags:
        - v1alpha1/subject
      description: Create single subject.
      operationId: CreateSubject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subject'
        required: true
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Subject'
  /api/v1alpha1/subject/collection/collect:
    post:
      tags:
        - v1alpha1/subject/collection
      description: Collect subject by user.
      operationId: CollectSubject.
      parameters:
        - name: userId
          in: query
          description: User id.
          required: true
          schema:
            type: integer
            format: int64
        - name: subjectId
          in: query
          description: Subject id.
          required: true
          schema:
            type: integer
            format: int64
        - name: type
          in: query
          description: Collection type.
          required: true
          schema:
            type: string
            enum:
              - WISH
              - DOING
              - DONE
              - SHELVE
              - DISCARD
        - name: isPrivate
          in: query
          description: Is private, default is false.
          schema:
            type: boolean
      responses: { }
    delete:
      tags:
        - v1alpha1/subject/collection
      description: Remove subject collect.
      operationId: RemoveSubjectCollect.
      parameters:
        - name: userId
          in: query
          description: User id.
          required: true
          schema:
            type: integer
            format: int64
        - name: subjectId
          in: query
          description: Subject id.
          required: true
          schema:
            type: integer
            format: int64
      responses: { }
  /api/v1alpha1/subject/collection/mainEpisodeProgress/{userId}/{subjectId}/{progress}:
    put:
      tags:
        - v1alpha1/subject/collection
      description: Update subject collection main episode progress.
      operationId: UpdateSubjectCollectionMainEpProgress
      parameters:
        - name: userId
          in: path
          description: User id.
          required: true
          schema:
            type: integer
            format: int64
        - name: subjectId
          in: path
          description: Subject id.
          required: true
          schema:
            type: integer
            format: int64
        - name: progress
          in: path
          description: Main episode progress id.
          required: true
          schema:
            type: integer
            format: int32
      responses: { }
  /api/v1alpha1/subject/collection/{userId}/{subjectId}:
    get:
      tags:
        - v1alpha1/subject/collection
      description: Find user subject collection.
      operationId: FindSubjectCollection
      parameters:
        - name: userId
          in: path
          description: User id.
          required: true
          schema:
            type: integer
            format: int64
        - name: subjectId
          in: path
          description: Subject id.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SubjectCollection'
  /api/v1alpha1/subject/collections/{userId}:
    get:
      tags:
        - v1alpha1/subject/collection
      description: Find user subject collections.
      operationId: FindSubjectCollections
      parameters:
        - name: userId
          in: path
          description: User id.
          required: true
          schema:
            type: integer
            format: int64
        - name: page
          in: query
          description: Current page, default is 1.
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          description: Page size, default is 12.
          schema:
            type: integer
            format: int64
        - name: type
          in: query
          description: Collection type, default is null.
          schema:
            type: string
            enum:
              - WISH
              - DOING
              - DONE
              - SHELVE
              - DISCARD
        - name: is_private
          in: query
          description: Collection is private, default is null.
          schema:
            type: boolean
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagingWrap'
  /api/v1alpha1/subject/relation:
    post:
      tags:
        - v1alpha1/subject/relation
      description: Create subject relation
      operationId: CreateSubjectRelation
      requestBody:
        description: SubjectRelation
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SubjectRelation'
        required: true
      responses: { }
    delete:
      tags:
        - v1alpha1/subject/relation
      description: Remove subject relation
      operationId: RemoveSubjectRelation
      parameters:
        - name: subject_id
          in: query
          description: Subject id
          required: true
          schema:
            type: integer
            format: int64
        - name: relation_type
          in: query
          description: Subject relation type code
          required: true
          schema:
            type: string
            enum:
              - OTHER
              - ANIME
              - COMIC
              - GAME
              - MUSIC
              - NOVEL
              - REAL
              - BEFORE
              - AFTER
              - SAME_WORLDVIEW
              - ORIGINAL_SOUND_TRACK
        - name: relation_subjects
          in: query
          description: Relation subjects
          required: true
          schema:
            type: string
      responses: { }
  /api/v1alpha1/subject/relation/{subjectId}/{relationType}:
    get:
      tags:
        - v1alpha1/subject/relation
      operationId: GetSubjectRelationByIdAndType
      parameters:
        - name: subjectId
          in: path
          description: Subject id
          required: true
          schema:
            type: integer
            format: int64
        - name: relationType
          in: path
          description: Subject relation type
          required: true
          schema:
            type: string
            enum:
              - OTHER
              - ANIME
              - COMIC
              - GAME
              - MUSIC
              - NOVEL
              - REAL
              - BEFORE
              - AFTER
              - SAME_WORLDVIEW
              - ORIGINAL_SOUND_TRACK
      responses: { }
  /api/v1alpha1/subject/relations/{subjectId}:
    get:
      tags:
        - v1alpha1/subject/relation
      operationId: GetSubjectRelationsById
      parameters:
        - name: subjectId
          in: path
          description: Subject id
          required: true
          schema:
            type: integer
            format: int64
      responses: { }
  /api/v1alpha1/subject/sync/platform:
    post:
      tags:
        - v1alpha1/subject/sync/platform
      description: >-
        Sync subject and platform by platform name and platform id, create
        subject when params not contain subject id, update exists subject when
        params contain subject id.
      operationId: SyncSubjectAndPlatform
      parameters:
        - name: subjectId
          in: query
          description: Subject id.
          schema:
            type: integer
            format: int64
        - name: platform
          in: query
          description: Platform.
          required: true
          schema:
            type: string
            enum:
              - BGM_TV
              - TMDB
              - AniDB
              - TVDB
              - VNDB
              - DOU_BAN
              - OTHER
        - name: platformId
          in: query
          description: Platform id
          required: true
          schema:
            type: string
        - name: action
          in: query
          description: >-
            Sync action, such as PULL or MERGE, default is PULL PULL will
            override all subject meta info, MERGE will update meta info that
            absent.
          schema:
            type: string
            enum:
              - PULL
              - MERGE
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Subject'
  /api/v1alpha1/subject/{id}:
    get:
      tags:
        - v1alpha1/subject
      description: Search single subject by id.
      operationId: SearchSubjectById
      parameters:
        - name: id
          in: path
          description: Subject ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Subject'
    delete:
      tags:
        - v1alpha1/subject
      description: Delete subject by id.
      operationId: DeleteSubjectById
      parameters:
        - name: id
          in: path
          description: Subject id
          required: true
          schema:
            type: integer
            format: int64
      responses: { }
  /api/v1alpha1/subjects/condition:
    get:
      tags:
        - v1alpha1/subject
      description: List subjects by condition.
      operationId: ListSubjectsByCondition
      parameters:
        - name: page
          in: query
          description: 第几页，从1开始, 默认为1.
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          description: 每页条数，默认为10.
          schema:
            type: integer
            format: int32
        - name: name
          in: query
          description: 经过Basic64编码的名称，名称字段模糊查询。
          schema:
            type: string
        - name: nameCn
          in: query
          description: 经过Basic64编码的中文名称，中文名称字段模糊查询。
          schema:
            type: string
        - name: nsfw
          in: query
          description: Not Safe/Suitable For Work. default is false.
          schema:
            type: boolean
        - name: type
          in: query
          description: 条目类型E
          schema:
            type: string
            enum:
              - ANIME
              - COMIC
              - GAME
              - MUSIC
              - NOVEL
              - REAL
              - OTHER
        - name: airTimeDesc
          in: query
          description: 是否根据放送时间倒序，新番在列表前面。默认为 true.
          schema:
            type: boolean
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagingWrap'
  /api/v1alpha1/subjects/{page}/{size}:
    get:
      tags:
        - v1alpha1/subject
      operationId: SearchAllSubjectByPaging
      parameters:
        - name: page
          in: path
          description: Search page
          required: true
          schema:
            type: integer
            format: int64
        - name: size
          in: path
          description: Search page size
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagingWrap'
  /api/v1alpha1/tag:
    post:
      tags:
        - v1alpha1/tag
      description: Create tag
      operationId: CreateTag
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Tag'
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Tag'
  /api/v1alpha1/tag/condition:
    delete:
      tags:
        - v1alpha1/tag
      description: Remove tag by condition.
      operationId: RemoveTagByCondition
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum:
              - SUBJECT
              - EPISODE
        - name: masterId
          in: query
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          schema:
            type: string
      responses: { }
  /api/v1alpha1/tag/id/{id}:
    delete:
      tags:
        - v1alpha1/tag
      description: Remove tag by id.
      operationId: RemoveTagById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses: { }
  /api/v1alpha1/tags/condition:
    get:
      tags:
        - v1alpha1/tag
      description: List tags by condition.
      operationId: ListTagsByCondition
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum:
              - SUBJECT
              - EPISODE
        - name: masterId
          in: query
          schema:
            type: integer
            format: int64
        - name: userId
          in: query
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          schema:
            type: string
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
  /api/v1alpha1/tags/subject/subjectId/{subjectId}:
    get:
      tags:
        - v1alpha1/tag
      description: List subject tags by subject id.
      operationId: ListSubjectTagsBySubjectId
      parameters:
        - name: subjectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubjectTag'
  /api/v1alpha1/task/id/{id}:
    get:
      tags:
        - v1alpha1/task
      operationId: FindTaskById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: Task entity.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskEntity'
  /api/v1alpha1/task/process/{id}:
    get:
      tags:
        - v1alpha1/task
      operationId: FindTaskProcessById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        default:
          description: Process percentage. from 0 to 100.
          content:
            '*/*':
              schema:
                type: integer
                format: int64
  /api/v1alpha1/tasks/condition:
    get:
      tags:
        - v1alpha1/task
      description: List tasks by condition.
      operationId: ListTasksByCondition
      parameters:
        - name: page
          in: query
          description: 第几页，从1开始, 默认为1.
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          description: 每页条数，默认为10.
          schema:
            type: integer
            format: int32
        - name: name
          in: query
          description: 经过Basic64编码的任务名称，模糊匹配.
          schema:
            type: string
        - name: status
          in: query
          description: 任务状态，精准匹配.
          schema:
            type: string
            enum:
              - CREATE
              - RUNNING
              - FINISH
              - CANCEL
              - FAIL
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PagingWrap'
  /api/v1alpha1/user:
    put:
      tags:
        - v1alpha1/user
      description: Update user information.
      operationId: UpdateUser
      requestBody:
        description: User update info.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        '200':
          description: Update user information success.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/v1alpha1/user/current:
    get:
      tags:
        - v1alpha1/user
      description: Get current user detail.
      operationId: GetCurrentUserDetail
      responses:
        default:
          description: default response
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /api/v1alpha1/user/{username}/email:
    put:
      tags:
        - v1alpha1/user
      description: Bind user and email.
      operationId: BindEmail
      parameters:
        - name: username
          in: path
          description: Username for user.
          required: true
          schema:
            type: string
        - name: email
          in: query
          description: Email for user.
          required: true
          schema:
            type: string
        - name: verificationCode
          in: query
          description: Verification code once.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bind user and email success.
          content: { }
      deprecated: true
  /api/v1alpha1/user/{username}/password:
    put:
      tags:
        - v1alpha1/user
      description: Change user password.
      operationId: ChangeUserPassword
      parameters:
        - name: username
          in: path
          description: Username for user.
          required: true
          schema:
            type: string
        - name: oldPassword
          in: query
          description: Old password for user.
          required: true
          schema:
            type: string
        - name: newPassword
          in: query
          description: New password for user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Update user password success.
          content: { }
  /api/v1alpha1/user/{username}/role:
    put:
      tags:
        - v1alpha1/user
      description: Change user role by username and roleId.
      operationId: ChangeUserRole
      parameters:
        - name: username
          in: path
          description: Username for user.
          required: true
          schema:
            type: string
        - name: roleId
          in: query
          description: Id for role.
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Change user role success.
          content: { }
  /api/v1alpha1/user/{username}/telephone:
    put:
      tags:
        - v1alpha1/user
      description: Bind user and telephone.
      operationId: BindTelephone
      parameters:
        - name: username
          in: path
          description: Username for user.
          required: true
          schema:
            type: string
        - name: telephone
          in: query
          description: Telephone for user.
          required: true
          schema:
            type: string
        - name: verificationCode
          in: query
          description: Verification code once.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bind user and telephone success.
          content: { }
      deprecated: true
components:
  schemas:
    Link:
      type: object
      properties:
        href:
          type: string
        templated:
          type: boolean
    Author:
      type: object
      properties:
        name:
          type: string
        website:
          type: string
    Plugin:
      required:
        - version
      type: object
      properties:
        name:
          type: string
        clazz:
          type: string
        version:
          pattern: >-
            ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$
          type: string
          example: 1.0.0
        requires:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        logo:
          type: string
        homepage:
          type: string
        displayName:
          type: string
        description:
          type: string
        license:
          type: string
        state:
          type: string
          enum:
            - CREATED
            - DISABLED
            - RESOLVED
            - STARTED
            - STOPPED
            - FAILED
        dependencies:
          type: object
          additionalProperties:
            type: string
        loadLocation:
          type: object
          properties:
            absolute:
              type: boolean
            fileSystem:
              type: object
              properties:
                open:
                  type: boolean
                readOnly:
                  type: boolean
                separator:
                  type: string
                rootDirectories:
                  type: object
                fileStores:
                  type: object
                userPrincipalLookupService:
                  type: object
            nameCount:
              type: integer
              format: int32
        entry:
          type: string
        stylesheet:
          type: string
        configMapSchemas:
          type: string
    PagingWrap:
      required:
        - firstPage
        - hasNext
        - hasPrevious
        - items
        - lastPage
        - page
        - size
        - total
        - totalPages
      type: object
      properties:
        page:
          type: integer
          description: >-
            Page number, starts from 1. If not set or equal to 0, it means no
            pagination.
          format: int32
        size:
          type: integer
          description: Size of each page. If not set or equal to 0, it means no pagination.
          format: int32
        total:
          type: integer
          description: Total elements.
          format: int64
        items:
          type: array
          description: A chunk of items.
          items:
            type: object
            description: A chunk of items.
        lastPage:
          type: boolean
          description: Indicates whether current page is the last page.
        firstPage:
          type: boolean
          description: Indicates whether current page is the first page.
        hasNext:
          type: boolean
          description: Indicates whether current page has previous page.
        hasPrevious:
          type: boolean
          description: Indicates whether current page has previous page.
        totalPages:
          type: integer
          description: Indicates total pages.
          format: int64
    ConfigMap:
      type: object
      properties:
        name:
          type: string
        data:
          type: object
          additionalProperties:
            type: string
    Attachment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        parentId:
          type: integer
          format: int64
        type:
          type: string
          enum:
            - File
            - Directory
        url:
          type: string
        path:
          type: string
        fsPath:
          type: string
        name:
          type: string
        size:
          type: integer
          format: int64
        updateTime:
          type: string
          format: date-time
    AttachmentReference:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          enum:
            - SUBJECT
            - EPISODE
            - USER_AVATAR
        attachmentId:
          type: integer
          format: int64
        referenceId:
          type: integer
          format: int64
    BatchMatchingEpisodeAttachment:
      required:
        - attachmentIds
        - episodeId
      type: object
      properties:
        episodeId:
          type: integer
          description: episode id for subject.
          format: int64
        attachmentIds:
          type: array
          description: attachment id array.
          items:
            type: integer
            description: attachment id array.
            format: int64
    BatchMatchingSubjectEpisodesAttachment:
      required:
        - attachmentIds
        - subjectId
      type: object
      properties:
        subjectId:
          type: integer
          description: subject id for episode belong.
          format: int64
        attachmentIds:
          type: array
          description: attachment id array.
          items:
            type: integer
            description: attachment id array.
            format: int64
    VideoSubtitle:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        master_attachment_id:
          type: integer
          format: int64
        attachment_id:
          type: integer
          format: int64
    AttachmentRelation:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          enum:
            - VIDEO_SUBTITLE
        attachment_id:
          type: integer
          format: int64
        relation_attachment_id:
          type: integer
          format: int64
    PostAttachmentRelationsParam:
      required:
        - masterId
        - relationIds
        - type
      type: object
      properties:
        masterId:
          type: integer
          description: Master attachment id.
          format: int64
        type:
          type: string
          description: Type of attachment.
          enum:
            - VIDEO_SUBTITLE
        relationIds:
          type: array
          description: Related attachment ids.
          items:
            type: integer
            description: Related attachment ids.
            format: int64
    DefaultUploadRequest:
      required:
        - file
      type: object
      properties:
        file:
          type: string
          format: binary
    EpisodeResource:
      type: object
      properties:
        attachmentId:
          type: integer
          format: int64
        parentAttachmentId:
          type: integer
          format: int64
        episodeId:
          type: integer
          format: int64
        url:
          type: string
        canRead:
          type: boolean
        name:
          type: string
        tags:
          uniqueItems: true
          type: array
          items:
            type: string
    EpisodeCollection:
      type: object
      properties:
        id:
          type: integer
          format: int64
        finish:
          type: boolean
        progress:
          type: integer
          format: int64
        duration:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        sequence:
          type: integer
          format: int32
        user_id:
          type: integer
          format: int64
        episode_id:
          type: integer
          format: int64
        subject_id:
          type: integer
          format: int64
        name_cn:
          type: string
        air_time:
          type: string
          format: date-time
        ep_group:
          type: string
          enum:
            - MAIN
            - PROMOTION_VIDEO
            - OPENING_SONG
            - ENDING_SONG
            - SPECIAL_PROMOTION
            - SMALL_THEATER
            - LIVE
            - COMMERCIAL_MESSAGE
            - MUSIC_DIST1
            - MUSIC_DIST2
            - MUSIC_DIST3
            - MUSIC_DIST4
            - MUSIC_DIST5
            - OTHER
    EpisodeMeta:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        sequence:
          type: integer
          format: int32
        group:
          type: string
          enum:
            - MAIN
            - PROMOTION_VIDEO
            - OPENING_SONG
            - ENDING_SONG
            - SPECIAL_PROMOTION
            - SMALL_THEATER
            - LIVE
            - COMMERCIAL_MESSAGE
            - MUSIC_DIST1
            - MUSIC_DIST2
            - MUSIC_DIST3
            - MUSIC_DIST4
            - MUSIC_DIST5
            - OTHER
        subject_id:
          type: integer
          format: int64
        name_cn:
          type: string
        air_time:
          type: string
          format: date-time
    Episode:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        sequence:
          type: integer
          format: int32
        group:
          type: string
          enum:
            - MAIN
            - PROMOTION_VIDEO
            - OPENING_SONG
            - ENDING_SONG
            - SPECIAL_PROMOTION
            - SMALL_THEATER
            - LIVE
            - COMMERCIAL_MESSAGE
            - MUSIC_DIST1
            - MUSIC_DIST2
            - MUSIC_DIST3
            - MUSIC_DIST4
            - MUSIC_DIST5
            - OTHER
        resources:
          type: array
          items:
            $ref: '#/components/schemas/EpisodeResource'
        subject_id:
          type: integer
          format: int64
        name_cn:
          type: string
        air_time:
          type: string
          format: date-time
    SubjectHint:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        nameCn:
          type: string
        infobox:
          type: string
        summary:
          type: string
        nsfw:
          type: boolean
        type:
          type: string
          enum:
            - ANIME
            - COMIC
            - GAME
            - MUSIC
            - NOVEL
            - REAL
            - OTHER
        airTime:
          type: integer
          format: int64
    SubjectHints:
      type: object
      properties:
        hits:
          type: array
          items:
            $ref: '#/components/schemas/SubjectHint'
        keyword:
          type: string
        total:
          type: integer
          format: int64
        limit:
          type: integer
          format: int32
        processingTimeMillis:
          type: integer
          format: int64
    UploadRequest:
      type: object
      properties:
        file:
          type: string
          format: binary
    Subject:
      required:
        - name
        - nsfw
        - type
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          enum:
            - ANIME
            - COMIC
            - GAME
            - MUSIC
            - NOVEL
            - REAL
            - OTHER
        name:
          type: string
        infobox:
          type: string
        summary:
          type: string
        nsfw:
          type: boolean
        airTime:
          type: string
          format: date-time
        cover:
          type: string
        episodes:
          type: array
          items:
            $ref: '#/components/schemas/Episode'
        syncs:
          type: array
          items:
            $ref: '#/components/schemas/SubjectSync'
        canRead:
          type: boolean
        name_cn:
          type: string
        total_episodes:
          type: integer
          format: int64
        collection_status:
          type: string
          enum:
            - WISH
            - DOING
            - DONE
            - SHELVE
            - DISCARD
    SubjectSync:
      type: object
      properties:
        subjectId:
          type: integer
          format: int64
        platform:
          type: string
          enum:
            - BGM_TV
            - TMDB
            - AniDB
            - TVDB
            - VNDB
            - DOU_BAN
            - OTHER
        platformId:
          type: string
        syncTime:
          type: string
          format: date-time
    SubjectCollection:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          enum:
            - WISH
            - DOING
            - DONE
            - SHELVE
            - DISCARD
        name:
          type: string
        infobox:
          type: string
        summary:
          type: string
        nsfw:
          type: boolean
        cover:
          type: string
        user_id:
          type: integer
          format: int64
        subject_id:
          type: integer
          format: int64
        main_ep_progress:
          type: integer
          format: int32
        is_private:
          type: boolean
        subject_type:
          type: string
          enum:
            - ANIME
            - COMIC
            - GAME
            - MUSIC
            - NOVEL
            - REAL
            - OTHER
        name_cn:
          type: string
        air_time:
          type: string
          format: date-time
    SubjectRelation:
      required:
        - relation_subjects
        - relation_type
        - subject
      type: object
      properties:
        subject:
          type: integer
          format: int64
        relation_type:
          type: string
          enum:
            - OTHER
            - ANIME
            - COMIC
            - GAME
            - MUSIC
            - NOVEL
            - REAL
            - BEFORE
            - AFTER
            - SAME_WORLDVIEW
            - ORIGINAL_SOUND_TRACK
        relation_subjects:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int64
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          enum:
            - SUBJECT
            - EPISODE
        masterId:
          type: integer
          format: int64
        name:
          type: string
        userId:
          type: integer
          format: int64
        createTime:
          type: string
          format: date-time
    SubjectTag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        subjectId:
          type: integer
          format: int64
        name:
          type: string
        userId:
          type: integer
          format: int64
        createTime:
          type: string
          format: date-time
    TaskEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        status:
          type: string
          enum:
            - CREATE
            - RUNNING
            - FINISH
            - CANCEL
            - FAIL
        createTime:
          type: string
          format: date-time
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        total:
          type: integer
          format: int64
        index:
          type: integer
          format: int64
        failMessage:
          type: string
    UpdateUserRequest:
      required:
        - username
      type: object
      properties:
        username:
          type: string
        avatar:
          type: string
        nickname:
          type: string
        introduce:
          type: string
        site:
          type: string
    User:
      type: object
      properties:
        entity:
          $ref: '#/components/schemas/UserEntity'
    UserEntity:
      type: object
      properties:
        id:
          type: integer
          format: int64
        deleteStatus:
          type: boolean
        createUid:
          type: integer
          format: int64
        createTime:
          type: string
          format: date-time
        updateUid:
          type: integer
          format: int64
        updateTime:
          type: string
          format: date-time
        optimisticLockVersion:
          type: integer
          format: int64
        roleId:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
        nickname:
          type: string
        introduce:
          type: string
        telephone:
          type: string
        site:
          type: string
        email:
          type: string
        enable:
          type: boolean
        nonLocked:
          type: boolean
        avatar:
          type: string
        lastLoginIp:
          type: string
        lastLoginTime:
          type: string
          format: date-time
  securitySchemes:
    BasicAuth:
      type: http
      scheme: Basic
    BearerAuth:
      type: http
      scheme: Bearer
      bearerFormat: JWT
